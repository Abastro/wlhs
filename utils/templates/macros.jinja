{#
    - `elements` is a list of tuples of the form:
        `[(element_name: String, haskell_type: String)]`.
    - All other arguments are Strings.
    - For nested structs, separate member names with spaces.
#}
{% macro struct(include_file, c_name, haskell_name, elements) %}
data {-# CTYPE "{{ include_file }}" "struct {{ c_name }}" #-} {{ haskell_name }}
    {%- if elements +%}
    = {{ haskell_name }}
        {% for e in elements %}
    {%+ if e == elements[0] %}{{ '{' }}{%else%}{{ ',' }}{%endif%} {{ c_name }}_{{ e[0]|replace(' ', '_') }} :: {{ e[1] }}
        {% endfor %}
    {{ '}' }} deriving (Show)

instance Storable {{ haskell_name }} where
    alignment _ = #alignment struct {{ c_name }}
    sizeOf _ = #size struct {{ c_name }}
    peek ptr = {{ haskell_name }}
        {% for e in elements %}
        {%+ if e == elements[0] %}{{ '<$>' }}{%else%}{{ '<*>' }}{%endif%} (#peek struct {{ c_name }}, {{ e[0]|replace(' ', '.') }}) ptr
        {% endfor %}
    poke ptr t = do
        {%- for e in elements +%}
        (#poke struct {{ c_name }}, {{ e[0]|replace(' ', '.') }}) ptr $ {{ c_name }}_{{ e[0]|replace(' ', '_') }} t
        {%- endfor %}
    {% else +%}
    deriving (Show)
    {%- endif %}
{% endmacro %}

{#
    - `haskell_name` is a String corresponding to the enum name.
    - `elements` is a list of Strings that exactly match the names of the enum
      members.
#}
{% macro enum(haskell_name, elements) %}
type {{ haskell_name }} = CInt
    {% for e in elements %}
pattern {{ e }} :: (Eq a, Num a) => a
pattern {{ e }} = #const {{ e }}
    {% endfor %}
{% endmacro %}